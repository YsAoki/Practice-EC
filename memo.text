学習した内容。

ディレクトリの構成について
config
ページの設定に関することを書く（固定値の変数名など）
定数名はアッパースネークで書く。
例として、const START_NUMBER = 0;
また、ボタンのスタイルを配列管理するものも用意した。

hooks
reactのカスタムフックを書き込む。
カスタムフックでは、基本的に呼び出す際に定数名を:を用いて変換することで、同じコンポーネント内で複数回呼び出すことができるようになる。

utils
汎用的な関数を書き込む。

libs 
ライブラリに関することで
共通して使用されるコードや機能を格納する場所。
axios.createを使用するとリクエスト全ての頭にbaseURLが付与される。


theme
マテリアルデザインベースで考えていた場合に、xs xlなどが汎用性高くなるので、慣れておくと今後も便利そう。

typesは
types.d.ts内にかけ。
declaration（宣言）の意味。
型情報の宣言だけを書き込むためのファイルという意味合い。
既存の JavaScript ライブラリのための型宣言を提供する場合。
TypeScript プロジェクト内で共有される型定義を集中管理する場合。



cssについて
グローバルスタイルを使うのか
reset-cssとstyle.cssを使うのかはプロジェクト次第なので、どちらがより良い正解とは限らない。

wrapper、Box、containerの使い分け
大枠はcontainer、（1回しか使わない）
他の囲いは全てwrapperでOK（囲いの意味）
BOXは使うのやめとこう


themeから    '2xl': '24px',を使いたい時。
jsでは基本的に、キー名で始まる名前を直接使用できないため、
${theme.spacing['2xl']} このような記述で取り出しを行う。



jsについて
コーディング規約
イベントハンドラは基本的にon〜
例: onButtonClick()

一文字目が小文字のキャメルケース（ローワーキャメルケース）

モジュール名はアッパーキャメルケース（先頭も大文字）

DOM要素を操作するときは、接続後のElementをつける
例　const buttonElement = document.getElementById("submit-button");


ingとedで受動態使い分けろ。
Eventは、関数名としてはあまり使わない。引数のeが多いから。

英単語
previous 前回の
latest　最新の
init 初期化する
initial 初期の
active 有効にする
deactivate: 無効にする。
enable: ~を制御可能にする
force: 強制的な
extract: 抽出する。
soFar: 一時的な値（今の所）という意味合い。
例: nameSoFar: 今のところの名前（文字列型）

extra: 追加の
remaining: 残り物
maybeID: idかもしれない
missing: 足りない
separator: 抽出する。

